name: Cross build packages

concurrency:
  group: build-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
  - cron:  '0 */6 * * *'
  push:
    branches:
    - 'ci/**'
    tags:
    - v*
    - e*
  workflow_dispatch:
    inputs:
      branch_or_tag:
        required: false
      profile:
        required: false

jobs:
  prepare:
    runs-on: ubuntu-20.04
    container: ghcr.io/emqx/emqx-builder/5.0-17:1.13.4-24.2.1-1-ubuntu20.04
    outputs:
      BUILD_PROFILE: ${{ steps.get_profile.outputs.BUILD_PROFILE }}
      IS_EXACT_TAG: ${{ steps.get_profile.outputs.IS_EXACT_TAG }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch_or_tag }} # when input is not given, the event tag is used
          path: source
          fetch-depth: 0

      - name: Get profile to build
        id: get_profile
        run: |
          cd source
          git config --global --add safe.directory "$(pwd)"
          tag=${{ github.ref }}
          if git describe --tags --match "[v|e]*" --exact; then
            echo "WARN: This is an exact git tag, will publish release"
            is_exact_tag='true'
          else
            echo "WARN: This is NOT an exact git tag, will not publish release"
            is_exact_tag='false'
          fi
          echo "::set-output name=IS_EXACT_TAG::${is_exact_tag}"
          case $tag in
            refs/tags/v*)
              PROFILE='emqx'
              ;;
            refs/tags/e*)
              PROFILE=emqx-enterprise
              ;;
            *)
              PROFILE=${{ github.event.inputs.profile }}
              case "$PROFILE" in
                emqx)
                  true
                  ;;
                emqx-enterprise)
                  true
                  ;;
                *)
                  # maybe triggered from schedule
                  echo "WARN: \"$PROFILE\" is not a valid profile."
                  echo "building the default profile 'emqx' instead"
                  PROFILE='emqx'
                  ;;
              esac
              ;;
          esac
          echo "::set-output name=BUILD_PROFILE::$PROFILE"
      - name: get_all_deps
        run: |
          make -C source deps-all
          zip -ryq source.zip source/* source/.[^.]*
      - uses: actions/upload-artifact@v2
        with:
          name: source
          path: source.zip

  windows:
    runs-on: windows-2019
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        profile: # for now only CE for windows
          - emqx
        otp:
          - 24.2.1
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: source
        path: .
    - name: unzip source code
      run: Expand-Archive -Path source.zip -DestinationPath ./
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}
    - name: build
      env:
        PYTHON: python
        DIAGNOSTIC: 1
      working-directory: source
      run: |
        # ensure crypto app (openssl)
        erl -eval "erlang:display(crypto:info_lib())" -s init stop
        make ${{ matrix.profile }}-tgz
    - name: run emqx
      timeout-minutes: 5
      working-directory: source
      run: |
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx start
        Start-Sleep -s 5
        echo "EMQX started"
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx stop
        echo "EMQX stopped"
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx install
        echo "EMQX installed"
        ./_build/${{ matrix.profile }}/rel/emqx/bin/emqx uninstall
        echo "EMQX uninstalled"
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.profile }}-windows
        path: source/_packages/${{ matrix.profile }}/.

  mac:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        profile:
          - ${{ needs.prepare.outputs.BUILD_PROFILE }}
        otp:
          - 24.2.1-1
        os:
          - macos-11
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: source
        path: .
    - name: unzip source code
      run: unzip -q source.zip
    - name: prepare
      run: |
        brew update
        brew install curl zip unzip kerl coreutils
        echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
        echo "/usr/local/bin" >> $GITHUB_PATH
        git config --global credential.helper store
    - uses: actions/cache@v2
      id: cache
      with:
        path: ~/.kerl/${{ matrix.otp }}
        key: otp-install-${{ matrix.otp }}-${{ matrix.os }}
    - name: build erlang
      if: steps.cache.outputs.cache-hit != 'true'
      timeout-minutes: 60
      env:
        KERL_BUILD_BACKEND: git
        OTP_GITHUB_URL: https://github.com/emqx/otp
      run: |
        kerl update releases
        kerl build ${{ matrix.otp }}
        kerl install ${{ matrix.otp }} $HOME/.kerl/${{ matrix.otp }}

    - name: build
      working-directory: source
      env:
        AUTO_INSTALL_BUILD_DEPS: 1
      run: |
        . $HOME/.kerl/${{ matrix.otp }}/activate
        make ensure-rebar3
        sudo cp rebar3 /usr/local/bin/rebar3
        rm -rf _build/${{ matrix.profile }}/lib
        make ${{ matrix.profile }}-tgz
    - name: test
      working-directory: source
      run: |
        pkg_name=$(find _packages/${{ matrix.profile }} -mindepth 1 -maxdepth 1 -iname \*.tar.gz)
        mkdir -p emqx
        tar -C emqx -zxf $pkg_name
        # gsed -i '/emqx_telemetry/d' ./emqx/data/loaded_plugins
        ./emqx/bin/emqx start || cat emqx/log/erlang.log.1
        ready='no'
        for i in {1..18}; do
          if curl -fs 127.0.0.1:18083/api/v5/status > /dev/null; then
            ready='yes'
            break
          fi
          sleep 1
        done
        if [ "$ready" != "yes" ]; then
          echo "Timed out waiting for emqx to be ready"
          cat emqx/log/erlang.log.1
          exit 1
        fi
        ./emqx/bin/emqx_ctl status
        ./emqx/bin/emqx stop
        rm -rf emqx
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.profile }}-${{ matrix.otp }}
        path: source/_packages/${{ matrix.profile }}/.

  linux:
    needs: prepare
    runs-on: ${{ matrix.build_machine }}
    container:
      image: "ghcr.io/emqx/emqx-builder/5.0-17:${{ matrix.elixir }}-${{ matrix.otp }}-${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        profile:
          - ${{ needs.prepare.outputs.BUILD_PROFILE }}
        otp:
          - 24.2.1-1 # we test with OTP 23, but only build package on OTP 24 versions
        elixir:
          - 1.13.4
        # used to split elixir packages into a separate job, since the
        # entire job may take a lot of time, especially on arm64
        # emulation.
        # we only want to build ubuntu and centos with elixir for the
        # time being, so it's easier to just include those with
        # `with_elixir` set.
        build_elixir:
          # - with_elixir
          - no_elixir
        arch:
          - amd64
          - arm64
        os:
          - ubuntu20.04
          - ubuntu18.04
          - ubuntu16.04
          - debian11
          - debian10
          - debian9
          - el8
          - el7
          - raspbian10
        build_machine:
          - aws-arm64
          - ubuntu-20.04
        exclude:
        - arch: arm64
          build_machine: ubuntu-20.04
        - arch: amd64
          build_machine: aws-arm64
        - os: raspbian9
          arch: amd64
        - os: raspbian10
          arch: amd64
        - os: raspbian10 # we only have arm32 image
          arch: arm64
        - os: raspbian9
          profile: emqx
        - os: raspbian10
          profile: emqx
        - os: raspbian9
          profile: emqx-enterprise
        - os: raspbian10
          profile: emqx-enterprise
        include:
          - profile: emqx
            otp: 24.2.1-1
            elixir: 1.13.4
            build_elixir: with_elixir
            arch: amd64
            os: ubuntu20.04
            build_machine: ubuntu-20.04
          - profile: emqx
            otp: 24.2.1-1
            elixir: 1.13.4
            build_elixir: with_elixir
            arch: amd64
            os: el8
            build_machine: ubuntu-20.04

    defaults:
      run:
        shell: bash

    steps:
    - uses: AutoModality/action-clean@v1
      if: matrix.build_machine == 'aws-arm64'
    - uses: actions/download-artifact@v2
      with:
        name: source
        path: .
    - name: unzip source code
      run: unzip -q source.zip
    - name: build emqx packages
      working-directory: source
      env:
        OTP: ${{ matrix.otp }}
        ELIXIR: ${{ matrix.elixir }}
        PROFILE: ${{ matrix.profile }}
        ARCH: ${{ matrix.arch }}
        SYSTEM: ${{ matrix.os }}
      run: |
        set -eu
        git config --global --add safe.directory "/__w/emqx/emqx"
        # Align path for CMake caches
        if [ ! "$PWD" = "/emqx" ]; then
          ln -s $PWD /emqx
          cd /emqx
        fi
        echo "pwd is $PWD"
        PkgTypes="tgz pkg"
        IsElixir="no"
        if [ ${{ matrix.build_elixir }} = "with_elixir" ]; then
          PkgTypes="tgz"
          # set Elixir build flag
          IsElixir="yes"
        fi
        for PKGTYPE in ${PkgTypes};
        do
          ./scripts/buildx.sh \
            --profile "${PROFILE}" \
            --pkgtype "${PKGTYPE}" \
            --arch "${ARCH}" \
            --elixir "${IsElixir}" \
            --builder "ghcr.io/emqx/emqx-builder/5.0-17:${ELIXIR}-${OTP}-${SYSTEM}"
        done
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.profile }}-${{ matrix.otp }}
        path: source/_packages/${{ matrix.profile }}/.

  publish_artifacts:
    runs-on: ubuntu-20.04
    needs: [prepare, mac, linux]
    if: ${{ needs.prepare.outputs.IS_EXACT_TAG }}
    strategy:
      fail-fast: false
      matrix:
        profile:
          - ${{ needs.prepare.outputs.BUILD_PROFILE }}
        otp:
          - 24.2.1-1
        include:
          - profile: emqx
            otp: windows # otp version on windows is rather fixed
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.profile }}-${{ matrix.otp }}
        path: packages/${{ matrix.profile }}
    - name: install dos2unix
      run: sudo apt-get update && sudo apt install -y dos2unix
    - name: get packages
      run: |
        DEFAULT_BEAM_PLATFORM='otp24.2.1-1'
        set -e -u
        cd packages/${{ matrix.profile }}
        # Make a copy of the default OTP version package to a file without OTP version infix
        while read -r fname; do
          default_fname=$(echo "$fname" | sed "s/-${DEFAULT_BEAM_PLATFORM}//g")
          echo "$fname -> $default_fname"
          cp "$fname" "$default_fname"
        done < <(find . -maxdepth 1 -type f | grep -E "emqx(-enterprise)?-5\.[0-9]+\.[0-9]+.*-${DEFAULT_BEAM_PLATFORM}" | grep -v elixir)
        for var in $(ls | grep emqx | grep -v sha256); do
          dos2unix $var.sha256
          echo "$(cat $var.sha256) $var" | sha256sum -c || exit 1
        done
        cd -
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: upload to aws s3
      env:
        PROFILE: ${{ matrix.profile }}
      run: |
        set -e -u
        if [ $PROFILE = 'emqx' ]; then
            s3dir='emqx-ce'
        elif [ $PROFILE = 'emqx-enterprise' ]; then
            s3dir='emqx-ee'
        else
            echo "unknown profile $PROFILE"
            exit 1
        fi
        aws s3 cp --recursive packages/$PROFILE s3://${{ secrets.AWS_S3_BUCKET }}/$s3dir/${{ github.ref_name }}
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID }} --paths "/$s3dir/${{ github.ref_name }}/*"
